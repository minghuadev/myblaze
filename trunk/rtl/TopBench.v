// File: TopBench.v
// Generated by MyHDL 0.6
// Date: Tue Jun 15 23:58:39 2010

`timescale 1ns/10ps

module TopBench (

);


wire debug_dmem_ena_in;
wire debug_ex_mem_write;
wire debug_mm_mem_read;
wire rxd_line2;
wire [31:0] debug_ex_dat_b;
wire debug_ex_mem_read;
wire [31:0] debug_mm_alu_result;
wire [31:0] debug_ex_dat_a;
wire debug_ex_branch;
wire [31:0] debug_ex_dat_d;
wire [2:0] debug_of_branch_cond;
wire [31:0] debug_of_instruction;
wire debug_of_delay;
wire debug_dmem_we_out;
wire debug_dmem_ena_out;
wire [1:0] debug_of_carry;
wire [31:0] debug_dmem_data_in;
wire debug_of_fwd_reg_write;
reg clock;
wire [4:0] debug_of_reg_b;
wire [4:0] debug_of_reg_a;
wire [31:0] debug_gprf_dat_a;
reg txd_line2;
wire debug_imem_ena;
wire debug_of_carry_keep;
wire [4:0] debug_of_reg_d;
wire [1:0] debug_of_alu_src_b;
wire [31:0] debug_ex_alu_result;
wire [4:0] debug_mm_reg_d;
wire [1:0] debug_of_alu_src_a;
wire debug_dmem_ena;
wire [4:0] debug_of_fwd_reg_d;
wire debug_of_operation;
wire [31:0] debug_imem_data_in;
wire [31:0] debug_gprf_dat_d;
wire [31:0] debug_gprf_dat_b;
wire debug_of_reg_write;
wire [15:0] debug_ex_program_counter;
wire [4:0] debug_ex_reg_d;
wire [4:0] debug_ex_reg_b;
wire [4:0] debug_ex_reg_a;
wire debug_imem_we_out;
wire debug_imem_ena_out;
wire [1:0] debug_of_transfer_size;
wire rxd_line;
wire [31:0] debug_dmem_data_out;
reg [7:0] leds;
wire [31:0] debug_of_fwd_mem_result;
wire [31:0] debug_ex_instruction;
wire [15:0] debug_of_program_counter;
wire debug_of_mem_read;
wire debug_ex_flush_id;
wire [1:0] debug_mm_transfer_size;
reg reset;
wire debug_of_hazard;
wire [3:0] debug_imem_sel_out;
wire [31:0] debug_of_immediate;
wire [15:0] debug_if_program_counter;
wire debug_of_mem_write;
wire debug_ex_reg_write;
wire [3:0] debug_of_alu_op;
wire [31:0] debug_dmem_addr_out;
wire [3:0] debug_dmem_sel_out;
wire debug_mm_reg_write;
wire [15:0] debug_imem_addr_out;
wire [1:0] debug_ex_transfer_size;
wire [31:0] debug_imem_data_out;
reg txd_line;
reg top_write_en;
reg [31:0] top_led_low;
reg top_uart_rxd;
reg top_rx_error2;
reg [31:0] top_imem_data_in;
reg top_uart_rxd2;
reg [19:0] top_count;
reg [31:0] top_tx_data;
reg top_rx_error;
reg [31:0] top_led_reg;
wire top_dmem_we_out;
reg [3:0] top_dmem_sel;
reg top_rx_avail;
reg [31:0] top_rx_data;
wire top_write_en2;
wire [31:0] top_dmem_data_out;
wire [3:0] top_dmem_sel_out;
wire top_tx_busy2;
wire top_imem_we_out;
reg [31:0] top_imem_data_out;
wire [15:0] top_imem_addr_out;
wire top_tx_busy;
reg [3:0] top_imem_sel_out;
reg top_rx_avail2;
reg [31:0] top_dmem_data_in;
wire top_imem_ena;
reg [31:0] top_rx_data2;
wire [31:0] top_tx_data2;
reg top_dmem_ena;
reg top_dmem_ena_in;
reg top_read_en2;
reg top_read_en;
reg top_uart_txd2;
wire [31:0] top_dmem_addr_out;
wire top_imem_ena_out;
reg top_uart_txd;
wire top_dmem_ena_out;
reg [3:0] top_uart2_rx_bitcount;
wire top_uart2_enable16;
reg [3:0] top_uart2_tx_bitcount;
reg [15:0] top_uart2_enable16_counter;
reg top_uart2_uart_rxd1;
reg top_uart2_uart_rxd2;
reg [3:0] top_uart2_tx_count16;
reg top_uart2_tx_is_busy;
reg [8:0] top_uart2_txd_reg;
reg top_uart2_rx_is_busy;
reg [7:0] top_uart2_rxd_reg;
reg [3:0] top_uart2_rx_count16;
reg [3:0] top_uart_rx_bitcount;
wire top_uart_enable16;
reg [3:0] top_uart_tx_bitcount;
reg [15:0] top_uart_enable16_counter;
reg top_uart_uart_rxd1;
reg top_uart_uart_rxd2;
reg [3:0] top_uart_tx_count16;
reg top_uart_tx_is_busy;
reg [8:0] top_uart_txd_reg;
reg top_uart_rx_is_busy;
reg [7:0] top_uart_rxd_reg;
reg [3:0] top_uart_rx_count16;
reg top_core_mm_mem_read;
reg [15:0] top_core_ex_program_counter;
wire [4:0] top_core_of_reg_d;
reg [4:0] top_core_of_reg_a;
reg [4:0] top_core_of_reg_b;
reg top_core_of_operation;
reg [31:0] top_core_ex_instruction;
reg top_core_mm_reg_write;
reg [3:0] top_core_of_alu_op;
reg top_core_of_carry_keep;
wire top_core_of_hazard;
reg [4:0] top_core_ex_reg_a;
reg top_core_of_mem_write;
reg [4:0] top_core_ex_reg_b;
wire [4:0] top_core_ex_reg_d;
reg [31:0] top_core_gprf_dat_b;
reg [15:0] top_core_of_program_counter;
reg top_core_ex_branch;
wire [31:0] top_core_of_instruction;
wire [15:0] top_core_if_program_counter;
wire top_core_ex_reg_write;
reg [31:0] top_core_ex_dat_d;
reg top_core_ex_flush_id;
reg [31:0] top_core_ex_dat_a;
reg [31:0] top_core_ex_dat_b;
reg top_core_ex_mem_write;
reg top_core_of_reg_write;
reg [1:0] top_core_of_alu_src_a;
reg [1:0] top_core_of_alu_src_b;
reg [1:0] top_core_ex_transfer_size;
wire top_core_of_mem_read;
reg top_core_of_fwd_reg_write;
reg [31:0] top_core_gprf_dat_a;
reg [31:0] top_core_of_immediate;
reg [31:0] top_core_of_fwd_mem_result;
reg top_core_ex_mem_read;
reg [2:0] top_core_of_branch_cond;
reg [4:0] top_core_of_fwd_reg_d;
reg [1:0] top_core_of_carry;
reg [31:0] top_core_gprf_dat_d;
reg [31:0] top_core_mm_alu_result;
reg [4:0] top_core_mm_reg_d;
reg [1:0] top_core_of_transfer_size;
reg [1:0] top_core_mm_transfer_size;
wire [31:0] top_core_ex_alu_result;
reg top_core_of_delay;
reg [31:0] top_core_memu_mm_comb_alu_result;
reg [1:0] top_core_memu_mm_comb_transfer_size;
reg [31:0] top_core_memu_mem_result;
reg [4:0] top_core_memu_mm_comb_reg_d;
reg top_core_memu_mm_comb_reg_write;
reg top_core_memu_mm_comb_mem_read;
reg top_core_exeu_ex_comb_mem_write;
reg top_core_exeu_ex_r_flush_ex;
reg [1:0] top_core_exeu_ex_comb_transfer_size;
reg [31:0] top_core_exeu_ex_comb_r_alu_result;
reg top_core_exeu_ex_comb_r_flush_ex;
reg top_core_exeu_ex_r_reg_write;
reg [4:0] top_core_exeu_ex_r_reg_d;
reg [4:0] top_core_exeu_ex_comb_r_reg_d;
reg top_core_exeu_ex_comb_r_carry;
reg [31:0] top_core_exeu_ex_r_alu_result;
reg [31:0] top_core_exeu_ex_comb_instruction;
reg [31:0] top_core_exeu_ex_comb_dat_d;
reg top_core_exeu_ex_comb_mem_read;
reg [31:0] top_core_exeu_ex_comb_dat_a;
reg [4:0] top_core_exeu_ex_comb_reg_b;
reg [4:0] top_core_exeu_ex_comb_reg_a;
reg top_core_exeu_ex_r_carry;
reg [31:0] top_core_exeu_ex_comb_dat_b;
reg top_core_exeu_ex_comb_r_reg_write;
reg [15:0] top_core_exeu_ex_comb_program_counter;
reg top_core_exeu_ex_comb_branch;
reg top_core_exeu_ex_comb_flush_id;
reg [4:0] top_core_deco_of_comb_reg_a;
reg [31:0] top_core_deco_of_comb_r_instruction;
reg [31:0] top_core_deco_of_comb_immediate;
reg top_core_deco_of_comb_reg_write;
reg [15:0] top_core_deco_of_r_immediate_high;
reg [4:0] top_core_deco_of_r_reg_d;
reg [1:0] top_core_deco_of_comb_carry;
reg top_core_deco_of_comb_r_has_imm_high;
reg [1:0] top_core_deco_of_comb_alu_src_b;
reg top_core_deco_of_r_mem_read;
reg top_core_deco_of_comb_r_mem_read;
reg [15:0] top_core_deco_of_comb_r_immediate_high;
reg [1:0] top_core_deco_of_comb_alu_src_a;
reg top_core_deco_of_comb_carry_keep;
reg top_core_deco_of_r_has_imm_high;
reg [31:0] top_core_deco_wb_dat_d;
reg top_core_deco_of_comb_mem_write;
reg [15:0] top_core_deco_of_r_program_counter;
reg top_core_deco_of_comb_delay;
reg top_core_deco_of_comb_r_hazard;
reg [15:0] top_core_deco_of_comb_program_counter;
reg [15:0] top_core_deco_of_comb_r_program_counter;
reg [2:0] top_core_deco_of_comb_branch_cond;
reg [1:0] top_core_deco_of_comb_transfer_size;
reg [4:0] top_core_deco_of_comb_r_reg_d;
reg [4:0] top_core_deco_of_comb_reg_b;
reg top_core_deco_of_r_hazard;
reg [31:0] top_core_deco_of_r_instruction;
reg [3:0] top_core_deco_of_comb_alu_op;
reg top_core_deco_of_comb_operation;
reg [15:0] top_core_ftch_if_comb_r_program_counter;
reg [15:0] top_core_ftch_if_r_program_counter;
reg [29:0] top_dmem_bank_addr;
reg [13:0] top_imem_bank_addr;

reg [31:0] top_core_deco_gprf_d_ram [0:32-1];
reg [31:0] top_core_deco_gprf_b_ram [0:32-1];
reg [31:0] top_core_deco_gprf_a_ram [0:32-1];
reg [7:0] top_dmem_bank_in [0:4-1];
reg [7:0] top_dmem_bank_out [0:4-1];
reg top_dmem_bank_wre [0:4-1];
reg [7:0] top_dmem_bank_3_ram [0:2048-1];
reg [7:0] top_dmem_bank_2_ram [0:2048-1];
reg [7:0] top_dmem_bank_1_ram [0:2048-1];
reg [7:0] top_dmem_bank_0_ram [0:2048-1];
reg [7:0] top_imem_bank_in [0:4-1];
reg [7:0] top_imem_bank_out [0:4-1];
reg top_imem_bank_wre [0:4-1];
reg [7:0] top_imem_bank_3_ram [0:2048-1];
reg [7:0] top_imem_bank_2_ram [0:2048-1];
reg [7:0] top_imem_bank_1_ram [0:2048-1];
reg [7:0] top_imem_bank_0_ram [0:2048-1];

assign rxd_line2 = 0;
assign rxd_line = 0;
assign top_write_en2 = 0;
assign top_imem_we_out = 0;
assign top_imem_ena = 1;
assign top_tx_data2 = 0;

function [32-1:0] MYHDL22_align_mem_load;
    input [32-1:0] data;
    input [2-1:0] size;
    input [32-1:0] address;
    reg [32-1:0] result;
begin: MYHDL91_RETURN
    result = 32'h0;
    // synthesis parallel_case full_case
    casez (size)
        2'b10: begin
            if ((address[1] == 0)) begin
                if ((address[0] == 0)) begin
                    result = data[32-1:24];
                end
                else begin
                    result = data[24-1:16];
                end
            end
            else begin
                if ((address[0] == 0)) begin
                    result = data[16-1:8];
                end
                else begin
                    result = data[8-1:0];
                end
            end
        end
        2'b01: begin
            if ((address[1] == 0)) begin
                result = data[32-1:16];
            end
            else begin
                result = data[16-1:0];
            end
        end
        default: begin
            result = data;
        end
    endcase
    MYHDL22_align_mem_load = result;
    disable MYHDL91_RETURN;
end
endfunction

function [32-1:0] MYHDL23_sign_extend16;
    input [16-1:0] value;
    input fill;
    reg [32-1:0] tmp;
    integer i;
    integer size;
begin: MYHDL92_RETURN
    tmp = 32'h0;
    size = (32 - 16);
    for (i=0; i<size; i=i+1) begin
        tmp[((32 - 1) - i)] = fill;
    end
    tmp[16-1:0] = value[16-1:0];
    MYHDL23_sign_extend16 = tmp;
    disable MYHDL92_RETURN;
end
endfunction

function [4-1:0] MYHDL33_decode_mem_store;
    input [32-1:0] address;
    input [2-1:0] size;
    reg [4-1:0] result;
begin: MYHDL93_RETURN
    result = 4'h0;
    // synthesis parallel_case full_case
    casez (size)
        2'b10: begin
            if ((address[1] == 0)) begin
                if ((address[0] == 0)) begin
                    result = 8;
                end
                else begin
                    result = 4;
                end
            end
            else begin
                if ((address[0] == 0)) begin
                    result = 2;
                end
                else begin
                    result = 1;
                end
            end
        end
        2'b01: begin
            if ((address[1] == 0)) begin
                result = 12;
            end
            else begin
                result = 3;
            end
        end
        default: begin
            result = 15;
        end
    endcase
    MYHDL33_decode_mem_store = result;
    disable MYHDL93_RETURN;
end
endfunction

function MYHDL35_forward_condition;
    input [1-1:0] reg_write;
    input [5-1:0] reg_a;
    input [5-1:0] reg_d;
    reg result;
begin: MYHDL94_RETURN
    result = (reg_write && (reg_a == reg_d));
    MYHDL35_forward_condition = result;
    disable MYHDL94_RETURN;
end
endfunction

function [32-1:0] MYHDL36_select_register_data;
    input [32-1:0] reg_dat;
    input [5-1:0] reg_x;
    input [32-1:0] wb_dat;
    input write;
    reg [32-1:0] tmp;
begin: MYHDL95_RETURN
    tmp = 32'h0;
    if ((reg_x == 0)) begin
        tmp = 0;
    end
    else if (write) begin
        tmp = wb_dat;
    end
    else begin
        tmp = reg_dat;
    end
    MYHDL36_select_register_data = tmp;
    disable MYHDL95_RETURN;
end
endfunction

function MYHDL37_forward_condition;
    input [1-1:0] reg_write;
    input [5-1:0] reg_a;
    input [5-1:0] reg_d;
    reg result;
begin: MYHDL96_RETURN
    result = (reg_write && (reg_a == reg_d));
    MYHDL37_forward_condition = result;
    disable MYHDL96_RETURN;
end
endfunction

function [32-1:0] MYHDL38_select_register_data;
    input [32-1:0] reg_dat;
    input [5-1:0] reg_x;
    input [32-1:0] wb_dat;
    input write;
    reg [32-1:0] tmp;
begin: MYHDL97_RETURN
    tmp = 32'h0;
    if ((reg_x == 0)) begin
        tmp = 0;
    end
    else if (write) begin
        tmp = wb_dat;
    end
    else begin
        tmp = reg_dat;
    end
    MYHDL38_select_register_data = tmp;
    disable MYHDL97_RETURN;
end
endfunction

function MYHDL39_forward_condition;
    input [1-1:0] reg_write;
    input [5-1:0] reg_a;
    input [5-1:0] reg_d;
    reg result;
begin: MYHDL98_RETURN
    result = (reg_write && (reg_a == reg_d));
    MYHDL39_forward_condition = result;
    disable MYHDL98_RETURN;
end
endfunction

function [32-1:0] MYHDL40_select_register_data;
    input [32-1:0] reg_dat;
    input [5-1:0] reg_x;
    input [32-1:0] wb_dat;
    input write;
    reg [32-1:0] tmp;
begin: MYHDL99_RETURN
    tmp = 32'h0;
    if ((reg_x == 0)) begin
        tmp = 0;
    end
    else if (write) begin
        tmp = wb_dat;
    end
    else begin
        tmp = reg_dat;
    end
    MYHDL40_select_register_data = tmp;
    disable MYHDL99_RETURN;
end
endfunction

function [32-1:0] MYHDL41_align_mem_load;
    input [32-1:0] data;
    input [2-1:0] size;
    input [32-1:0] address;
    reg [32-1:0] result;
begin: MYHDL100_RETURN
    result = 32'h0;
    // synthesis parallel_case full_case
    casez (size)
        2'b10: begin
            if ((address[1] == 0)) begin
                if ((address[0] == 0)) begin
                    result = data[32-1:24];
                end
                else begin
                    result = data[24-1:16];
                end
            end
            else begin
                if ((address[0] == 0)) begin
                    result = data[16-1:8];
                end
                else begin
                    result = data[8-1:0];
                end
            end
        end
        2'b01: begin
            if ((address[1] == 0)) begin
                result = data[32-1:16];
            end
            else begin
                result = data[16-1:0];
            end
        end
        default: begin
            result = data;
        end
    endcase
    MYHDL41_align_mem_load = result;
    disable MYHDL100_RETURN;
end
endfunction

function MYHDL42_forward_condition;
    input [1-1:0] reg_write;
    input [5-1:0] reg_a;
    input [5-1:0] reg_d;
    reg result;
begin: MYHDL101_RETURN
    result = (reg_write && (reg_a == reg_d));
    MYHDL42_forward_condition = result;
    disable MYHDL101_RETURN;
end
endfunction

function MYHDL43_forward_condition;
    input [1-1:0] reg_write;
    input [5-1:0] reg_a;
    input [5-1:0] reg_d;
    reg result;
begin: MYHDL102_RETURN
    result = (reg_write && (reg_a == reg_d));
    MYHDL43_forward_condition = result;
    disable MYHDL102_RETURN;
end
endfunction

function MYHDL44_forward_condition;
    input [1-1:0] reg_write;
    input [5-1:0] reg_a;
    input [5-1:0] reg_d;
    reg result;
begin: MYHDL103_RETURN
    result = (reg_write && (reg_a == reg_d));
    MYHDL44_forward_condition = result;
    disable MYHDL103_RETURN;
end
endfunction

function MYHDL45_forward_condition;
    input [1-1:0] reg_write;
    input [5-1:0] reg_a;
    input [5-1:0] reg_d;
    reg result;
begin: MYHDL104_RETURN
    result = (reg_write && (reg_a == reg_d));
    MYHDL45_forward_condition = result;
    disable MYHDL104_RETURN;
end
endfunction

function MYHDL46_forward_condition;
    input [1-1:0] reg_write;
    input [5-1:0] reg_a;
    input [5-1:0] reg_d;
    reg result;
begin: MYHDL105_RETURN
    result = (reg_write && (reg_a == reg_d));
    MYHDL46_forward_condition = result;
    disable MYHDL105_RETURN;
end
endfunction

function [32-1:0] MYHDL47_align_mem_store;
    input [32-1:0] data;
    input [2-1:0] size;
    reg [32-1:0] result;
begin: MYHDL106_RETURN
    result = 32'h0;
    // synthesis parallel_case full_case
    casez (size)
        2'b10: begin
            result = {data[8-1:0], data[8-1:0], data[8-1:0], data[8-1:0]};
        end
        2'b01: begin
            result = {data[16-1:0], data[16-1:0]};
        end
        default: begin
            result = data;
        end
    endcase
    MYHDL47_align_mem_store = result;
    disable MYHDL106_RETURN;
end
endfunction

function MYHDL48_forward_condition;
    input [1-1:0] reg_write;
    input [5-1:0] reg_a;
    input [5-1:0] reg_d;
    reg result;
begin: MYHDL107_RETURN
    result = (reg_write && (reg_a == reg_d));
    MYHDL48_forward_condition = result;
    disable MYHDL107_RETURN;
end
endfunction

function [32-1:0] MYHDL49_align_mem_store;
    input [32-1:0] data;
    input [2-1:0] size;
    reg [32-1:0] result;
begin: MYHDL108_RETURN
    result = 32'h0;
    // synthesis parallel_case full_case
    casez (size)
        2'b10: begin
            result = {data[8-1:0], data[8-1:0], data[8-1:0], data[8-1:0]};
        end
        2'b01: begin
            result = {data[16-1:0], data[16-1:0]};
        end
        default: begin
            result = data;
        end
    endcase
    MYHDL49_align_mem_store = result;
    disable MYHDL108_RETURN;
end
endfunction

function [32-1:0] MYHDL50_align_mem_store;
    input [32-1:0] data;
    input [2-1:0] size;
    reg [32-1:0] result;
begin: MYHDL109_RETURN
    result = 32'h0;
    // synthesis parallel_case full_case
    casez (size)
        2'b10: begin
            result = {data[8-1:0], data[8-1:0], data[8-1:0], data[8-1:0]};
        end
        2'b01: begin
            result = {data[16-1:0], data[16-1:0]};
        end
        default: begin
            result = data;
        end
    endcase
    MYHDL50_align_mem_store = result;
    disable MYHDL109_RETURN;
end
endfunction

function [33-1:0] MYHDL51_add;
    input [32-1:0] a;
    input [32-1:0] b;
    input ci;
    reg [34-1:0] aa;
    reg [34-1:0] cc;
    reg [33-1:0] result;
    reg [34-1:0] bb;
begin: MYHDL110_RETURN
    aa = 34'h0;
    bb = 34'h0;
    cc = 34'h0;
    result = 33'h0;
    aa = {1'b0, a, 1'b1};
    bb = {1'b0, b, ci};
    cc = ($signed(aa) + $signed(bb));
    result = cc[(32 + 2)-1:1];
    MYHDL51_add = result;
    disable MYHDL110_RETURN;
end
endfunction

function [32-1:0] MYHDL55_sign_extend8;
    input [32-1:0] value;
    input fill;
    reg [32-1:0] tmp;
    integer i;
    integer size;
begin: MYHDL111_RETURN
    tmp = 32'h0;
    size = (32 - 8);
    for (i=0; i<size; i=i+1) begin
        tmp[((32 - 1) - i)] = fill;
    end
    tmp[8-1:0] = value[8-1:0];
    MYHDL55_sign_extend8 = tmp;
    disable MYHDL111_RETURN;
end
endfunction

function [32-1:0] MYHDL61_sign_extend16;
    input [32-1:0] value;
    input fill;
    reg [32-1:0] tmp;
    integer i;
    integer size;
begin: MYHDL112_RETURN
    tmp = 32'h0;
    size = (32 - 16);
    for (i=0; i<size; i=i+1) begin
        tmp[((32 - 1) - i)] = fill;
    end
    tmp[16-1:0] = value[16-1:0];
    MYHDL61_sign_extend16 = tmp;
    disable MYHDL112_RETURN;
end
endfunction

initial begin: TOPBENCH_CLOCKGEN
    # 10;
    clock <= 1'b0;
    while (1) begin
        # 10;
        clock <= (!clock);
    end
end

always @(posedge clock) begin: TOPBENCH_MONITOR
    if ((debug_dmem_addr_out == 4294967232)) begin
        if (debug_dmem_we_out) begin
            $write("%0c", debug_dmem_data_out[8-1:0]);
        end
    end
end

always @(top_led_reg, top_dmem_we_out, top_dmem_ena_out, top_dmem_data_out, top_dmem_sel_out, top_dmem_addr_out) begin: TOPBENCH_TOP_GLUE
    top_dmem_ena_in <= 1'b1;
    if (top_dmem_we_out) begin
        top_dmem_sel <= top_dmem_sel_out;
    end
    else begin
        top_dmem_sel <= 0;
    end
    top_tx_data <= top_dmem_data_out;
    if ((top_dmem_addr_out < (2 ** 13))) begin
        top_dmem_ena <= top_dmem_ena_out;
        top_write_en <= 1'b0;
    end
    else if ((top_dmem_we_out && (top_dmem_addr_out[28-1:0] >= 268435376))) begin
        top_dmem_ena <= 1'b0;
        top_write_en <= 1'b1;
    end
    else begin
        top_write_en <= 1'b0;
        top_dmem_ena <= 1'b0;
    end
    leds <= top_led_reg[8-1:0];
end

always @(posedge clock) begin: TOPBENCH_TOP_IMEM_BANK_0_LOGIC
    if (top_imem_ena_out) begin
        if (top_imem_bank_wre[0]) begin
            top_imem_bank_0_ram[top_imem_bank_addr] <= top_imem_bank_in[0];
        end
        top_imem_bank_out[0] <= top_imem_bank_0_ram[(top_imem_bank_addr % 2048)];
    end
end



    initial $readmemh("rom0.vmem", top_imem_bank_0_ram);
    
always @(posedge clock) begin: TOPBENCH_TOP_IMEM_BANK_1_LOGIC
    if (top_imem_ena_out) begin
        if (top_imem_bank_wre[1]) begin
            top_imem_bank_1_ram[top_imem_bank_addr] <= top_imem_bank_in[1];
        end
        top_imem_bank_out[1] <= top_imem_bank_1_ram[(top_imem_bank_addr % 2048)];
    end
end



    initial $readmemh("rom1.vmem", top_imem_bank_1_ram);
    
always @(posedge clock) begin: TOPBENCH_TOP_IMEM_BANK_2_LOGIC
    if (top_imem_ena_out) begin
        if (top_imem_bank_wre[2]) begin
            top_imem_bank_2_ram[top_imem_bank_addr] <= top_imem_bank_in[2];
        end
        top_imem_bank_out[2] <= top_imem_bank_2_ram[(top_imem_bank_addr % 2048)];
    end
end



    initial $readmemh("rom2.vmem", top_imem_bank_2_ram);
    
always @(posedge clock) begin: TOPBENCH_TOP_IMEM_BANK_3_LOGIC
    if (top_imem_ena_out) begin
        if (top_imem_bank_wre[3]) begin
            top_imem_bank_3_ram[top_imem_bank_addr] <= top_imem_bank_in[3];
        end
        top_imem_bank_out[3] <= top_imem_bank_3_ram[(top_imem_bank_addr % 2048)];
    end
end



    initial $readmemh("rom3.vmem", top_imem_bank_3_ram);
    
always @(top_imem_sel_out, top_imem_bank_out[0], top_imem_bank_out[1], top_imem_bank_out[2], top_imem_bank_out[3], top_imem_data_out, top_imem_addr_out) begin: TOPBENCH_TOP_IMEM_DUMBASS_REASSEMBLE
    integer i;
    top_imem_bank_addr <= top_imem_addr_out[16-1:2];
    for (i=0; i<4; i=i+1) begin
        top_imem_bank_wre[i] <= top_imem_sel_out[i];
    end
    top_imem_bank_in[0] <= top_imem_data_out[8-1:0];
    top_imem_bank_in[1] <= top_imem_data_out[16-1:8];
    top_imem_bank_in[2] <= top_imem_data_out[24-1:16];
    top_imem_bank_in[3] <= top_imem_data_out[32-1:24];
    top_imem_data_in <= {top_imem_bank_out[3], top_imem_bank_out[2], top_imem_bank_out[1], top_imem_bank_out[0]};
end


assign debug_dmem_ena_in = top_dmem_ena_in;
assign debug_dmem_data_in = top_dmem_data_in;
assign debug_dmem_data_out = top_dmem_data_out;
assign debug_dmem_sel_out = top_dmem_sel_out;
assign debug_dmem_we_out = top_dmem_we_out;
assign debug_dmem_addr_out = top_dmem_addr_out;
assign debug_dmem_ena_out = top_dmem_ena_out;
assign debug_dmem_ena = top_dmem_ena;
assign debug_imem_data_in = top_imem_data_in;
assign debug_imem_data_out = top_imem_data_out;
assign debug_imem_sel_out = top_imem_sel_out;
assign debug_imem_we_out = top_imem_we_out;
assign debug_imem_addr_out = top_imem_addr_out;
assign debug_imem_ena = top_imem_ena;
assign debug_imem_ena_out = top_imem_ena_out;

always @(posedge clock) begin: TOPBENCH_TOP_CORE_DECO_GPRF_A_LOGIC
    if (top_dmem_ena_in) begin
        if (top_core_mm_reg_write) begin
            top_core_deco_gprf_a_ram[top_core_mm_reg_d] <= top_core_deco_wb_dat_d;
        end
        top_core_gprf_dat_a <= top_core_deco_gprf_a_ram[top_core_deco_of_comb_reg_a];
    end
end

always @(posedge clock) begin: TOPBENCH_TOP_CORE_DECO_GPRF_D_LOGIC
    if (top_dmem_ena_in) begin
        if (top_core_mm_reg_write) begin
            top_core_deco_gprf_d_ram[top_core_mm_reg_d] <= top_core_deco_wb_dat_d;
        end
        top_core_gprf_dat_d <= top_core_deco_gprf_d_ram[top_core_deco_of_comb_r_reg_d];
    end
end

always @(posedge clock) begin: TOPBENCH_TOP_CORE_DECO_GPRF_B_LOGIC
    if (top_dmem_ena_in) begin
        if (top_core_mm_reg_write) begin
            top_core_deco_gprf_b_ram[top_core_mm_reg_d] <= top_core_deco_wb_dat_d;
        end
        top_core_gprf_dat_b <= top_core_deco_gprf_b_ram[top_core_deco_of_comb_reg_b];
    end
end


assign top_core_of_hazard = top_core_deco_of_r_hazard;
assign top_core_of_mem_read = top_core_deco_of_r_mem_read;
assign top_core_of_reg_d = top_core_deco_of_r_reg_d;
assign top_core_of_instruction = top_core_deco_of_r_instruction;

always @(posedge clock) begin: TOPBENCH_TOP_CORE_DECO_DECODE
    if (reset) begin
        top_core_of_alu_op <= 4'b0000;
        top_core_of_alu_src_a <= 2'b00;
        top_core_of_alu_src_b <= 2'b00;
        top_core_of_branch_cond <= 3'b111;
        top_core_of_carry <= 2'b00;
        top_core_of_carry_keep <= 1'b0;
        top_core_of_delay <= 1'b0;
        top_core_of_immediate <= 0;
        top_core_of_mem_write <= 1'b0;
        top_core_of_operation <= 1'b0;
        top_core_of_program_counter <= 0;
        top_core_of_reg_a <= 0;
        top_core_of_reg_b <= 0;
        top_core_of_reg_write <= 1'b0;
        top_core_of_transfer_size <= 2'b00;
        top_core_deco_of_r_mem_read <= 1'b0;
        top_core_deco_of_r_reg_d <= 0;
        top_core_deco_of_r_hazard <= 1'b0;
        top_core_deco_of_r_has_imm_high <= 1'b0;
        top_core_deco_of_r_immediate_high <= 0;
        top_core_deco_of_r_instruction <= 0;
        top_core_deco_of_r_program_counter <= 0;
        top_core_of_fwd_mem_result <= 0;
        top_core_of_fwd_reg_d <= 0;
        top_core_of_fwd_reg_write <= 1'b0;
    end
    else if (top_dmem_ena_in) begin
        top_core_of_alu_op <= top_core_deco_of_comb_alu_op;
        top_core_of_alu_src_a <= top_core_deco_of_comb_alu_src_a;
        top_core_of_alu_src_b <= top_core_deco_of_comb_alu_src_b;
        top_core_of_branch_cond <= top_core_deco_of_comb_branch_cond;
        top_core_of_carry <= top_core_deco_of_comb_carry;
        top_core_of_carry_keep <= top_core_deco_of_comb_carry_keep;
        top_core_of_delay <= top_core_deco_of_comb_delay;
        top_core_of_immediate <= top_core_deco_of_comb_immediate;
        top_core_of_mem_write <= top_core_deco_of_comb_mem_write;
        top_core_of_operation <= top_core_deco_of_comb_operation;
        top_core_of_program_counter <= top_core_deco_of_comb_program_counter;
        top_core_of_reg_a <= top_core_deco_of_comb_reg_a;
        top_core_of_reg_b <= top_core_deco_of_comb_reg_b;
        top_core_of_reg_write <= top_core_deco_of_comb_reg_write;
        top_core_of_transfer_size <= top_core_deco_of_comb_transfer_size;
        top_core_deco_of_r_mem_read <= top_core_deco_of_comb_r_mem_read;
        top_core_deco_of_r_reg_d <= top_core_deco_of_comb_r_reg_d;
        top_core_deco_of_r_hazard <= top_core_deco_of_comb_r_hazard;
        top_core_deco_of_r_has_imm_high <= top_core_deco_of_comb_r_has_imm_high;
        top_core_deco_of_r_immediate_high <= top_core_deco_of_comb_r_immediate_high;
        top_core_deco_of_r_instruction <= top_core_deco_of_comb_r_instruction;
        top_core_deco_of_r_program_counter <= top_core_deco_of_comb_r_program_counter;
        top_core_of_fwd_mem_result <= top_core_deco_wb_dat_d;
        top_core_of_fwd_reg_d <= top_core_mm_reg_d;
        top_core_of_fwd_reg_write <= top_core_mm_reg_write;
    end
end

always @(top_core_deco_of_r_mem_read, top_core_deco_of_r_reg_d, top_core_deco_of_r_immediate_high, top_core_ex_flush_id, top_dmem_data_in, top_core_deco_of_r_instruction, top_imem_data_in, top_core_mm_alu_result, top_core_deco_of_r_has_imm_high, top_core_deco_of_r_program_counter, top_core_deco_of_r_hazard, top_core_if_program_counter, top_core_mm_mem_read, top_core_mm_transfer_size) begin: TOPBENCH_TOP_CORE_DECO_COMB
    reg [2-1:0] transfer_size;
    reg [5-1:0] reg_b;
    reg [5-1:0] reg_a;
    reg reg_write;
    reg [32-1:0] r_instruction;
    reg [2-1:0] carry;
    reg operation;
    reg [32-1:0] mem_result;
    reg delay;
    reg has_imm;
    reg r_has_imm_high;
    reg carry_keep;
    reg [16-1:0] r_program_counter;
    reg [4-1:0] alu_op;
    reg r_hazard;
    reg [3-1:0] branch_cond;
    reg [32-1:0] immediate;
    reg [16-1:0] immediate_low;
    reg [16-1:0] program_counter;
    reg mem_write;
    reg [2-1:0] alu_src_b;
    reg [2-1:0] alu_src_a;
    reg [5-1:0] r_reg_d;
    reg [5-1:0] opgroup;
    reg [32-1:0] instruction;
    reg r_mem_read;
    reg [16-1:0] r_immediate_high;
    reg [6-1:0] opcode;
    r_instruction = 32'h0;
    r_instruction = top_imem_data_in;
    r_program_counter = 16'h0;
    r_program_counter = top_core_if_program_counter;
    r_immediate_high = 16'h0;
    r_has_imm_high = 1'b0;
    r_reg_d = 5'h0;
    r_hazard = 1'b0;
    immediate = 32'h0;
    immediate_low = 16'h0;
    instruction = 32'h0;
    mem_result = 32'h0;
    opcode = 6'h0;
    opgroup = 5'h0;
    program_counter = 16'h0;
    reg_a = 5'h0;
    reg_b = 5'h0;
    if (top_core_mm_mem_read) begin
        mem_result = MYHDL22_align_mem_load(top_dmem_data_in, top_core_mm_transfer_size, top_core_mm_alu_result[2-1:0]);
    end
    else begin
        mem_result = top_core_mm_alu_result;
    end
    top_core_deco_wb_dat_d <= mem_result;
    if (((!top_core_ex_flush_id) && top_core_deco_of_r_mem_read && ((top_imem_data_in[21-1:16] == top_core_deco_of_r_reg_d) || (top_imem_data_in[16-1:11] == top_core_deco_of_r_reg_d)))) begin
        instruction = 0;
        program_counter = 0;
        r_hazard = 1'b1;
    end
    else if (((!top_core_ex_flush_id) && top_core_deco_of_r_mem_read && (top_imem_data_in[26-1:21] == top_core_deco_of_r_reg_d))) begin
        instruction = 0;
        program_counter = 0;
        r_hazard = 1'b1;
    end
    else if (top_core_deco_of_r_hazard) begin
        instruction = top_core_deco_of_r_instruction;
        program_counter = top_core_deco_of_r_program_counter;
        r_hazard = 1'b0;
    end
    else begin
        instruction = top_imem_data_in;
        program_counter = top_core_if_program_counter;
        r_hazard = 1'b0;
    end
    opgroup = {instruction[32-1:30], instruction[29-1:26]};
    opcode = instruction[32-1:26];
    has_imm = opcode[3];
    immediate_low = instruction[16-1:0];
    reg_a = instruction[21-1:16];
    reg_b = instruction[16-1:11];
    r_reg_d = instruction[26-1:21];
    if (top_core_deco_of_r_has_imm_high) begin
        immediate = {top_core_deco_of_r_immediate_high, immediate_low};
    end
    else begin
        immediate = MYHDL23_sign_extend16(immediate_low, immediate_low[15]);
    end
    alu_op = 4'b0000;
    alu_src_a = 2'b00;
    alu_src_b = 2'b00;
    branch_cond = 3'b111;
    carry = 2'b00;
    carry_keep = 1'b0;
    delay = 1'b0;
    r_mem_read = 1'b0;
    mem_write = 1'b0;
    operation = 1'b0;
    reg_write = 1'b0;
    transfer_size = 2'b00;
    if (((top_core_ex_flush_id || r_hazard) != 0)) begin
        // pass
    end
    else if ((opgroup[5-1:3] == 0)) begin
        alu_op = 4'b0000;
        if (opcode[0]) begin
            alu_src_a = 2'b01;
        end
        if (((opcode == 5) && instruction[1])) begin
            operation = 1'b1;
        end
        if (has_imm) begin
            alu_src_b = 2'b10;
        end
        else begin
            alu_src_b = 2'b00;
        end
        if ((opcode[2-1:0] == 0)) begin
            carry = 2'b00;
        end
        else if ((opcode[2-1:0] == 1)) begin
            carry = 2'b01;
        end
        else begin
            carry = 2'b10;
        end
        carry_keep = opcode[2];
        reg_write = (!(r_reg_d == 0));
    end
    else if ((opgroup[5-1:2] == 4)) begin
        if ((opcode[2-1:0] == 0)) begin
            alu_op = 4'b0001;
        end
        else if ((opcode[2-1:0] == 2)) begin
            alu_op = 4'b0011;
        end
        else begin
            alu_op = 4'b0010;
        end
        if ((has_imm && (opcode[2-1:0] == 3))) begin
            alu_src_b = 2'b11;
        end
        else if (has_imm) begin
            alu_src_b = 2'b10;
        end
        else if (((!has_imm) && (opcode[2-1:0] == 3))) begin
            alu_src_b = 2'b01;
        end
        else begin
            alu_src_b = 2'b00;
        end
        reg_write = (!(r_reg_d == 0));
    end
    else if ((opcode == 44)) begin
        r_immediate_high = instruction[16-1:0];
        r_has_imm_high = 1'b1;
    end
    else if ((opcode == 36)) begin
        if ((instruction[7-1:5] == 3)) begin
            if (instruction[0]) begin
                alu_op = 4'b0110;
            end
            else begin
                alu_op = 4'b0101;
            end
        end
        else begin
            alu_op = 4'b0100;
            carry_keep = 1'b0;
            if ((instruction[7-1:5] == 2)) begin
                carry = 2'b00;
            end
            else if ((instruction[7-1:5] == 1)) begin
                carry = 2'b10;
            end
            else begin
                carry = 2'b11;
            end
        end
        reg_write = (!(r_reg_d == 0));
    end
    else if ((opgroup == 22)) begin
        branch_cond = 3'b110;
        if (has_imm) begin
            alu_src_b = 2'b10;
        end
        else begin
            alu_src_b = 2'b00;
        end
        if (reg_a[2]) begin
            reg_write = (!(r_reg_d == 0));
        end
        if (reg_a[3]) begin
            alu_src_a = 2'b11;
        end
        else begin
            alu_src_a = 2'b10;
        end
        delay = reg_a[4];
    end
    else if ((opgroup == 23)) begin
        alu_op = 4'b0000;
        alu_src_a = 2'b10;
        if (has_imm) begin
            alu_src_b = 2'b10;
        end
        else begin
            alu_src_b = 2'b00;
        end
        if ((r_reg_d[3-1:0] == 0)) begin
            branch_cond = 3'b000;
        end
        else if ((r_reg_d[3-1:0] == 1)) begin
            branch_cond = 3'b001;
        end
        else if ((r_reg_d[3-1:0] == 2)) begin
            branch_cond = 3'b010;
        end
        else if ((r_reg_d[3-1:0] == 3)) begin
            branch_cond = 3'b011;
        end
        else if ((r_reg_d[3-1:0] == 4)) begin
            branch_cond = 3'b100;
        end
        else begin
            branch_cond = 3'b101;
        end
        delay = r_reg_d[4];
    end
    else if ((opcode == 45)) begin
        branch_cond = 3'b110;
        alu_src_b = 2'b10;
        delay = 1'b1;
    end
    else if ((opgroup[5-1:3] == 3)) begin
        alu_op = 4'b0000;
        alu_src_a = 2'b00;
        if (has_imm) begin
            alu_src_b = 2'b10;
        end
        else begin
            alu_src_b = 2'b00;
        end
        carry = 2'b00;
        if (opcode[2]) begin
            mem_write = 1'b1;
            r_mem_read = 1'b0;
            reg_write = 1'b0;
        end
        else begin
            mem_write = 1'b0;
            r_mem_read = 1'b1;
            reg_write = (!(r_reg_d == 0));
        end
        if ((opcode[2-1:0] == 0)) begin
            transfer_size = 2'b10;
        end
        else if ((opcode[2-1:0] == 1)) begin
            transfer_size = 2'b01;
        end
        else begin
            transfer_size = 2'b00;
        end
        delay = 1'b0;
    end
    else begin
        // pass
    end
    top_core_deco_of_comb_r_has_imm_high <= r_has_imm_high;
    top_core_deco_of_comb_r_immediate_high <= r_immediate_high;
    top_core_deco_of_comb_r_instruction <= r_instruction;
    top_core_deco_of_comb_r_program_counter <= r_program_counter;
    top_core_deco_of_comb_r_hazard <= r_hazard;
    top_core_deco_of_comb_r_mem_read <= r_mem_read;
    top_core_deco_of_comb_r_reg_d <= r_reg_d;
    top_core_deco_of_comb_alu_op <= alu_op;
    top_core_deco_of_comb_alu_src_a <= alu_src_a;
    top_core_deco_of_comb_alu_src_b <= alu_src_b;
    top_core_deco_of_comb_branch_cond <= branch_cond;
    top_core_deco_of_comb_carry <= carry;
    top_core_deco_of_comb_carry_keep <= carry_keep;
    top_core_deco_of_comb_delay <= delay;
    top_core_deco_of_comb_immediate <= immediate;
    top_core_deco_of_comb_mem_write <= mem_write;
    top_core_deco_of_comb_operation <= operation;
    top_core_deco_of_comb_program_counter <= program_counter;
    top_core_deco_of_comb_reg_a <= reg_a;
    top_core_deco_of_comb_reg_b <= reg_b;
    top_core_deco_of_comb_reg_write <= reg_write;
    top_core_deco_of_comb_transfer_size <= transfer_size;
end

always @(posedge clock) begin: TOPBENCH_TOP_CORE_FTCH_SEQ
    if (reset) begin
        top_core_ftch_if_r_program_counter <= 0;
    end
    else if (top_dmem_ena_in) begin
        top_core_ftch_if_r_program_counter <= top_core_ftch_if_comb_r_program_counter;
    end
end


assign top_imem_ena_out = top_dmem_ena_in;
assign top_imem_addr_out = top_core_ftch_if_comb_r_program_counter;
assign top_core_if_program_counter = top_core_ftch_if_r_program_counter;

always @(reset, top_core_ex_alu_result, top_core_ex_branch, top_core_ftch_if_r_program_counter, top_core_of_hazard) begin: TOPBENCH_TOP_CORE_FTCH_COMB
    reg [16-1:0] program_counter;
    program_counter = 16'h0;
    if (reset) begin
        program_counter = 0;
    end
    else if (top_core_of_hazard) begin
        program_counter = top_core_ftch_if_r_program_counter;
    end
    else if (top_core_ex_branch) begin
        program_counter = top_core_ex_alu_result[16-1:0];
    end
    else begin
        program_counter = ((top_core_ftch_if_r_program_counter + 4) % 65536);
    end
    top_core_ftch_if_comb_r_program_counter <= program_counter;
end


assign debug_if_program_counter = top_core_if_program_counter;
assign debug_of_alu_op = top_core_of_alu_op;
assign debug_of_alu_src_a = top_core_of_alu_src_a;
assign debug_of_alu_src_b = top_core_of_alu_src_b;
assign debug_of_branch_cond = top_core_of_branch_cond;
assign debug_of_carry = top_core_of_carry;
assign debug_of_carry_keep = top_core_of_carry_keep;
assign debug_of_delay = top_core_of_delay;
assign debug_of_hazard = top_core_of_hazard;
assign debug_of_immediate = top_core_of_immediate;
assign debug_of_instruction = top_core_of_instruction;
assign debug_of_mem_read = top_core_of_mem_read;
assign debug_of_mem_write = top_core_of_mem_write;
assign debug_of_operation = top_core_of_operation;
assign debug_of_program_counter = top_core_of_program_counter;
assign debug_of_reg_a = top_core_of_reg_a;
assign debug_of_reg_b = top_core_of_reg_b;
assign debug_of_reg_d = top_core_of_reg_d;
assign debug_of_reg_write = top_core_of_reg_write;
assign debug_of_transfer_size = top_core_of_transfer_size;
assign debug_of_fwd_mem_result = top_core_of_fwd_mem_result;
assign debug_of_fwd_reg_d = top_core_of_fwd_reg_d;
assign debug_of_fwd_reg_write = top_core_of_fwd_reg_write;
assign debug_gprf_dat_a = top_core_gprf_dat_a;
assign debug_gprf_dat_b = top_core_gprf_dat_b;
assign debug_gprf_dat_d = top_core_gprf_dat_d;
assign debug_ex_alu_result = top_core_ex_alu_result;
assign debug_ex_reg_d = top_core_ex_reg_d;
assign debug_ex_reg_write = top_core_ex_reg_write;
assign debug_ex_branch = top_core_ex_branch;
assign debug_ex_dat_d = top_core_ex_dat_d;
assign debug_ex_flush_id = top_core_ex_flush_id;
assign debug_ex_mem_read = top_core_ex_mem_read;
assign debug_ex_mem_write = top_core_ex_mem_write;
assign debug_ex_program_counter = top_core_ex_program_counter;
assign debug_ex_transfer_size = top_core_ex_transfer_size;
assign debug_ex_dat_a = top_core_ex_dat_a;
assign debug_ex_dat_b = top_core_ex_dat_b;
assign debug_ex_instruction = top_core_ex_instruction;
assign debug_ex_reg_a = top_core_ex_reg_a;
assign debug_ex_reg_b = top_core_ex_reg_b;
assign debug_mm_alu_result = top_core_mm_alu_result;
assign debug_mm_mem_read = top_core_mm_mem_read;
assign debug_mm_reg_d = top_core_mm_reg_d;
assign debug_mm_reg_write = top_core_mm_reg_write;
assign debug_mm_transfer_size = top_core_mm_transfer_size;

always @(posedge clock) begin: TOPBENCH_TOP_CORE_MEMU_SEQ
    if (reset) begin
        top_core_mm_alu_result <= 0;
        top_core_mm_mem_read <= 1'b0;
        top_core_mm_reg_d <= 0;
        top_core_mm_reg_write <= 1'b0;
        top_core_mm_transfer_size <= 2'b00;
    end
    else if (top_dmem_ena_in) begin
        top_core_mm_alu_result <= top_core_memu_mm_comb_alu_result;
        top_core_mm_mem_read <= top_core_memu_mm_comb_mem_read;
        top_core_mm_reg_d <= top_core_memu_mm_comb_reg_d;
        top_core_mm_reg_write <= top_core_memu_mm_comb_reg_write;
        top_core_mm_transfer_size <= top_core_memu_mm_comb_transfer_size;
    end
end

always @(top_core_ex_dat_d, top_core_ex_branch, top_core_ex_reg_d, top_core_ex_program_counter, top_core_ex_alu_result, top_core_ex_mem_read, top_core_ex_reg_write, top_core_ex_transfer_size) begin: TOPBENCH_TOP_CORE_MEMU_COMB
    reg [32-1:0] alu_result;
    alu_result = 32'h0;
    if (top_core_ex_branch) begin
        alu_result = top_core_ex_program_counter;
    end
    else begin
        alu_result = top_core_ex_alu_result;
    end
    top_core_memu_mem_result <= top_core_ex_dat_d;
    top_core_memu_mm_comb_alu_result <= alu_result;
    top_core_memu_mm_comb_mem_read <= top_core_ex_mem_read;
    top_core_memu_mm_comb_reg_d <= top_core_ex_reg_d;
    top_core_memu_mm_comb_reg_write <= top_core_ex_reg_write;
    top_core_memu_mm_comb_transfer_size <= top_core_ex_transfer_size;
end


assign top_dmem_data_out = top_core_memu_mem_result;
assign top_dmem_sel_out = MYHDL33_decode_mem_store(top_core_ex_alu_result[2-1:0], top_core_ex_transfer_size);
assign top_dmem_we_out = top_core_ex_mem_write;
assign top_dmem_addr_out = top_core_ex_alu_result[32-1:0];
assign top_dmem_ena_out = (top_core_ex_mem_write || top_core_ex_mem_read);

always @(top_core_gprf_dat_d, top_core_of_reg_write, top_dmem_data_in, top_core_gprf_dat_a, top_core_gprf_dat_b, top_core_of_transfer_size, top_core_of_instruction, top_core_of_fwd_reg_d, top_core_exeu_ex_r_flush_ex, top_core_of_carry, top_core_of_program_counter, top_core_mm_transfer_size, top_core_of_fwd_reg_write, top_core_of_alu_src_a, top_core_exeu_ex_r_reg_write, top_core_mm_mem_read, top_core_of_alu_src_b, top_core_of_delay, top_core_of_fwd_mem_result, top_core_mm_alu_result, top_core_of_mem_read, top_core_mm_reg_d, top_core_of_reg_d, top_core_of_reg_a, top_core_of_reg_b, top_core_of_operation, top_core_exeu_ex_r_alu_result, top_core_exeu_ex_r_reg_d, top_core_of_immediate, top_core_exeu_ex_r_carry, top_core_of_mem_write, top_core_mm_reg_write, top_core_of_branch_cond, top_core_of_alu_op, top_core_of_carry_keep) begin: TOPBENCH_TOP_CORE_EXEU_COMB
    reg [2-1:0] transfer_size;
    reg [32-1:0] dat_a;
    reg [32-1:0] xor_rslt;
    reg zero;
    reg [33-1:0] result;
    reg carry;
    reg flush_id;
    reg [32-1:0] or_rslt;
    reg r_carry;
    reg [32-1:0] mem_result;
    reg r_flush_ex;
    reg [32-1:0] sel_dat_b;
    reg [32-1:0] sel_dat_a;
    reg [32-1:0] r_alu_result;
    reg branch;
    reg cmp_cond;
    reg msb;
    reg [32-1:0] sel_dat_d;
    reg mem_write;
    reg [16-1:0] program_counter;
    reg [32-1:0] dat_d;
    reg [32-1:0] dat_b;
    reg r_reg_write;
    reg [32-1:0] alu_src_b;
    reg [32-1:0] alu_src_a;
    reg [5-1:0] r_reg_d;
    reg [32-1:0] and_rslt;
    reg mem_read;
    reg [33-1:0] result_add;
    r_carry = 1'b0;
    r_flush_ex = 1'b0;
    r_alu_result = 32'h0;
    r_reg_d = 5'h0;
    r_reg_write = 1'b0;
    branch = 1'b0;
    dat_d = 32'h0;
    flush_id = 1'b0;
    mem_read = 1'b0;
    mem_write = 1'b0;
    program_counter = 16'h0;
    transfer_size = 2'b00;
    alu_src_a = 32'h0;
    alu_src_b = 32'h0;
    carry = 1'b0;
    result = 33'h0;
    result_add = 33'h0;
    zero = 1'b0;
    dat_a = 32'h0;
    dat_b = 32'h0;
    sel_dat_a = 32'h0;
    sel_dat_b = 32'h0;
    sel_dat_d = 32'h0;
    mem_result = 32'h0;
    sel_dat_a = MYHDL36_select_register_data(top_core_gprf_dat_a, top_core_of_reg_a, top_core_of_fwd_mem_result, MYHDL35_forward_condition(top_core_of_fwd_reg_write, top_core_of_fwd_reg_d, top_core_of_reg_a));
    sel_dat_b = MYHDL38_select_register_data(top_core_gprf_dat_b, top_core_of_reg_b, top_core_of_fwd_mem_result, MYHDL37_forward_condition(top_core_of_fwd_reg_write, top_core_of_fwd_reg_d, top_core_of_reg_b));
    sel_dat_d = MYHDL40_select_register_data(top_core_gprf_dat_d, top_core_of_reg_d, top_core_of_fwd_mem_result, MYHDL39_forward_condition(top_core_of_fwd_reg_write, top_core_of_fwd_reg_d, top_core_of_reg_d));
    if ((!top_core_exeu_ex_r_flush_ex)) begin
        mem_write = (top_core_of_mem_write != 0);
        mem_read = (top_core_of_mem_read != 0);
        transfer_size = top_core_of_transfer_size;
        r_reg_write = (top_core_of_reg_write != 0);
        r_reg_d = top_core_of_reg_d;
    end
    if (top_core_mm_mem_read) begin
        mem_result = MYHDL41_align_mem_load(top_dmem_data_in, top_core_mm_transfer_size, top_core_mm_alu_result[2-1:0]);
    end
    else begin
        mem_result = top_core_mm_alu_result;
    end
    if ((MYHDL42_forward_condition(top_core_exeu_ex_r_reg_write, top_core_exeu_ex_r_reg_d, top_core_of_reg_a) == 1'b1)) begin
        dat_a = top_core_exeu_ex_r_alu_result;
    end
    else if ((MYHDL43_forward_condition(top_core_mm_reg_write, top_core_mm_reg_d, top_core_of_reg_a) == 1'b1)) begin
        dat_a = mem_result;
    end
    else begin
        dat_a = sel_dat_a;
    end
    if ((MYHDL44_forward_condition(top_core_exeu_ex_r_reg_write, top_core_exeu_ex_r_reg_d, top_core_of_reg_b) == 1'b1)) begin
        dat_b = top_core_exeu_ex_r_alu_result;
    end
    else if ((MYHDL45_forward_condition(top_core_mm_reg_write, top_core_mm_reg_d, top_core_of_reg_b) == 1'b1)) begin
        dat_b = mem_result;
    end
    else begin
        dat_b = sel_dat_b;
    end
    if ((MYHDL46_forward_condition(top_core_exeu_ex_r_reg_write, top_core_exeu_ex_r_reg_d, top_core_of_reg_d) == 1'b1)) begin
        dat_d = MYHDL47_align_mem_store(top_core_exeu_ex_r_alu_result, top_core_of_transfer_size);
    end
    else if ((MYHDL48_forward_condition(top_core_mm_reg_write, top_core_mm_reg_d, top_core_of_reg_d) == 1'b1)) begin
        dat_d = MYHDL49_align_mem_store(mem_result, top_core_of_transfer_size);
    end
    else begin
        dat_d = MYHDL50_align_mem_store(sel_dat_d, top_core_of_transfer_size);
    end
    // synthesis parallel_case full_case
    casez (top_core_of_alu_src_a)
        2'b10: begin
            alu_src_a = top_core_of_program_counter;
        end
        2'b01: begin
            alu_src_a = (~dat_a);
        end
        2'b11: begin
            alu_src_a = 0;
        end
        default: begin
            alu_src_a = dat_a;
        end
    endcase
    // synthesis parallel_case full_case
    casez (top_core_of_alu_src_b)
        2'b10: begin
            alu_src_b = top_core_of_immediate;
        end
        2'b11: begin
            alu_src_b = (~top_core_of_immediate);
        end
        2'b01: begin
            alu_src_b = (~dat_b);
        end
        default: begin
            alu_src_b = dat_b;
        end
    endcase
    // synthesis parallel_case full_case
    casez (top_core_of_carry)
        2'b10: begin
            carry = (top_core_exeu_ex_r_carry != 0);
        end
        2'b01: begin
            carry = 1'b1;
        end
        2'b11: begin
            carry = alu_src_a[(32 - 1)];
        end
        default: begin
            carry = 1'b0;
        end
    endcase
    result_add = MYHDL51_add(alu_src_a, alu_src_b, carry);
    // synthesis parallel_case full_case
    casez (top_core_of_alu_op)
        4'b0000: begin
            result = result_add;
        end
        4'b0001: begin
            or_rslt = 32'h0;
            or_rslt = (alu_src_a | alu_src_b);
            result = or_rslt;
        end
        4'b0010: begin
            and_rslt = 32'h0;
            and_rslt = (alu_src_a & alu_src_b);
            result = and_rslt;
        end
        4'b0011: begin
            xor_rslt = 32'h0;
            xor_rslt = (alu_src_a ^ alu_src_b);
            result = xor_rslt;
        end
        4'b0100: begin
            result = {alu_src_a[0], carry, alu_src_a[32-1:1]};
        end
        4'b0101: begin
            result = {1'b0, MYHDL55_sign_extend8(alu_src_a, alu_src_a[7])};
        end
        4'b0110: begin
            result = {1'b0, MYHDL61_sign_extend16(alu_src_a, alu_src_a[15])};
        end
        default: begin
            result = 0;
        end
    endcase
    if (top_core_of_carry_keep) begin
        r_carry = (top_core_exeu_ex_r_carry != 0);
    end
    else begin
        r_carry = result[32];
    end
    if ((!top_core_exeu_ex_r_flush_ex)) begin
        zero = (dat_a == 0);
        // synthesis parallel_case full_case
        casez (top_core_of_branch_cond)
            3'b110: begin
                branch = 1'b1;
            end
            3'b000: begin
                branch = zero;
            end
            3'b001: begin
                branch = (!zero);
            end
            3'b010: begin
                branch = dat_a[(32 - 1)];
            end
            3'b011: begin
                branch = (dat_a[(32 - 1)] || zero);
            end
            3'b100: begin
                branch = (!((dat_a[(32 - 1)] || zero) != 0));
            end
            3'b101: begin
                branch = (!dat_a[(32 - 1)]);
            end
            default: begin
                branch = 1'b0;
            end
        endcase
    end
    cmp_cond = (alu_src_a[(32 - 1)] ^ alu_src_b[(32 - 1)]);
    if ((top_core_of_operation && cmp_cond)) begin
        msb = alu_src_a[(32 - 1)];
        r_alu_result = {msb, result[(32 - 1)-1:0]};
    end
    else begin
        r_alu_result = result[32-1:0];
    end
    program_counter = top_core_of_program_counter;
    flush_id = branch;
    r_flush_ex = (branch && (!top_core_of_delay));
    top_core_exeu_ex_comb_r_carry <= r_carry;
    top_core_exeu_ex_comb_r_flush_ex <= r_flush_ex;
    top_core_exeu_ex_comb_r_alu_result <= r_alu_result;
    top_core_exeu_ex_comb_r_reg_d <= r_reg_d;
    top_core_exeu_ex_comb_r_reg_write <= r_reg_write;
    top_core_exeu_ex_comb_branch <= branch;
    top_core_exeu_ex_comb_dat_d <= dat_d;
    top_core_exeu_ex_comb_flush_id <= flush_id;
    top_core_exeu_ex_comb_mem_read <= mem_read;
    top_core_exeu_ex_comb_mem_write <= mem_write;
    top_core_exeu_ex_comb_program_counter <= program_counter;
    top_core_exeu_ex_comb_transfer_size <= transfer_size;
    top_core_exeu_ex_comb_dat_a <= dat_a;
    top_core_exeu_ex_comb_dat_b <= dat_b;
    top_core_exeu_ex_comb_instruction <= top_core_of_instruction;
    top_core_exeu_ex_comb_reg_a <= top_core_of_reg_a;
    top_core_exeu_ex_comb_reg_b <= top_core_of_reg_b;
end

always @(posedge clock) begin: TOPBENCH_TOP_CORE_EXEU_SEQ
    if (reset) begin
        top_core_exeu_ex_r_carry <= 1'b0;
        top_core_exeu_ex_r_flush_ex <= 1'b0;
        top_core_exeu_ex_r_alu_result <= 32'h0;
        top_core_exeu_ex_r_reg_d <= 5'h0;
        top_core_exeu_ex_r_reg_write <= 1'b0;
        top_core_ex_branch <= 1'b0;
        top_core_ex_dat_d <= 32'h0;
        top_core_ex_flush_id <= 1'b0;
        top_core_ex_mem_read <= 1'b0;
        top_core_ex_mem_write <= 1'b0;
        top_core_ex_program_counter <= 16'h0;
        top_core_ex_transfer_size <= 2'b00;
    end
    else if (top_dmem_ena_in) begin
        top_core_exeu_ex_r_carry <= top_core_exeu_ex_comb_r_carry;
        top_core_exeu_ex_r_flush_ex <= top_core_exeu_ex_comb_r_flush_ex;
        top_core_exeu_ex_r_alu_result <= top_core_exeu_ex_comb_r_alu_result;
        top_core_exeu_ex_r_reg_d <= top_core_exeu_ex_comb_r_reg_d;
        top_core_exeu_ex_r_reg_write <= top_core_exeu_ex_comb_r_reg_write;
        top_core_ex_branch <= top_core_exeu_ex_comb_branch;
        top_core_ex_dat_d <= top_core_exeu_ex_comb_dat_d;
        top_core_ex_flush_id <= top_core_exeu_ex_comb_flush_id;
        top_core_ex_mem_read <= top_core_exeu_ex_comb_mem_read;
        top_core_ex_mem_write <= top_core_exeu_ex_comb_mem_write;
        top_core_ex_program_counter <= top_core_exeu_ex_comb_program_counter;
        top_core_ex_transfer_size <= top_core_exeu_ex_comb_transfer_size;
        top_core_ex_dat_a <= top_core_exeu_ex_comb_dat_a;
        top_core_ex_dat_b <= top_core_exeu_ex_comb_dat_b;
        top_core_ex_instruction <= top_core_exeu_ex_comb_instruction;
        top_core_ex_reg_a <= top_core_exeu_ex_comb_reg_a;
        top_core_ex_reg_b <= top_core_exeu_ex_comb_reg_b;
    end
end


assign top_core_ex_alu_result = top_core_exeu_ex_r_alu_result;
assign top_core_ex_reg_d = top_core_exeu_ex_r_reg_d;
assign top_core_ex_reg_write = top_core_exeu_ex_r_reg_write;

always @(posedge clock) begin: TOPBENCH_TOP_RUN
    if (reset) begin
        txd_line <= 1'b0;
        txd_line2 <= 1'b0;
        top_led_reg <= 1;
        top_led_low <= 1;
        top_imem_data_out <= 0;
        top_imem_sel_out <= 0;
        top_read_en <= 1'b0;
        top_uart_rxd <= 1;
        top_read_en2 <= 1'b0;
        top_uart_rxd2 <= 1;
        top_count <= 0;
    end
    else begin
        txd_line <= top_uart_txd;
        top_uart_rxd <= rxd_line;
        txd_line2 <= top_uart_txd2;
        top_uart_rxd2 <= rxd_line2;
        top_read_en <= 1'b0;
        top_count <= ((top_count + 1) % (2 ** 20));
        if ((top_count == 0)) begin
            top_led_low <= {top_led_low[31-1:0], top_led_low[31]};
        end
        if ((top_imem_addr_out == 580)) begin
            top_led_reg <= 255;
        end
    end
end

always @(posedge clock) begin: TOPBENCH_TOP_UART_RXD_SYNC
    top_uart_uart_rxd1 <= top_uart_rxd;
    top_uart_uart_rxd2 <= top_uart_uart_rxd1;
end


assign top_uart_enable16 = (!(top_uart_enable16_counter != 0));


assign top_tx_busy = top_uart_tx_is_busy;

always @(posedge clock) begin: TOPBENCH_TOP_UART_ENABLE16_TICK
    if ((reset || top_uart_enable16)) begin
        top_uart_enable16_counter <= (27 - 1);
    end
    else begin
        top_uart_enable16_counter <= (top_uart_enable16_counter - 1);
    end
end

always @(posedge clock) begin: TOPBENCH_TOP_UART_RECV
    if (reset) begin
        top_uart_rx_count16 <= 0;
        top_rx_avail <= 1'b0;
        top_rx_error <= 1'b0;
        top_uart_rx_is_busy <= 1'b0;
    end
    else begin
        if (top_read_en) begin
            top_rx_avail <= 1'b0;
            top_rx_error <= 1'b0;
        end
        if (top_uart_enable16) begin
            if ((!top_uart_rx_is_busy)) begin
                if ((!top_uart_uart_rxd2)) begin
                    top_uart_rx_is_busy <= 1'b1;
                    top_uart_rx_count16 <= 7;
                    top_uart_rx_bitcount <= 0;
                end
            end
            else begin
                top_uart_rx_count16 <= ((top_uart_rx_count16 + 1) % 16);
                if ((top_uart_rx_count16 == 0)) begin
                    top_uart_rx_bitcount <= ((top_uart_rx_bitcount + 1) % 16);
                    if ((top_uart_rx_bitcount == 0)) begin
                        if (top_uart_uart_rxd2) begin
                            top_uart_rx_is_busy <= 1'b0;
                        end
                    end
                    else if ((top_uart_rx_bitcount == 9)) begin
                        top_uart_rx_is_busy <= 1'b0;
                        if (top_uart_uart_rxd2) begin
                            top_rx_data <= top_uart_rxd_reg;
                            top_rx_avail <= 1'b1;
                            top_rx_error <= 1'b0;
                        end
                        else begin
                            top_rx_error <= 1'b1;
                        end
                    end
                    else begin
                        top_uart_rxd_reg <= {top_uart_uart_rxd2, top_uart_rxd_reg[8-1:1]};
                    end
                end
            end
        end
    end
end

always @(posedge clock) begin: TOPBENCH_TOP_UART_TRANS
    if (reset) begin
        top_uart_tx_is_busy <= 1'b0;
        top_uart_txd <= 1;
        top_uart_tx_count16 <= 0;
    end
    else begin
        if ((top_write_en && (!top_uart_tx_is_busy))) begin
            top_uart_txd_reg <= {top_tx_data[8-1:0], 1'b0};
            top_uart_tx_bitcount <= 10;
            top_uart_tx_count16 <= 0;
            top_uart_tx_is_busy <= 1'b1;
        end
        if (top_uart_enable16) begin
            top_uart_tx_count16 <= ((top_uart_tx_count16 + 1) % 16);
            if (((top_uart_tx_count16 == 0) && top_uart_tx_is_busy)) begin
                top_uart_tx_bitcount <= (top_uart_tx_bitcount - 1);
                if ((top_uart_tx_bitcount == 0)) begin
                    top_uart_tx_is_busy <= 1'b0;
                end
                else begin
                    top_uart_txd <= top_uart_txd_reg[0];
                    top_uart_txd_reg <= {1'b1, top_uart_txd_reg[9-1:1]};
                end
            end
        end
    end
end

always @(posedge clock) begin: TOPBENCH_TOP_DMEM_BANK_0_LOGIC
    if (top_dmem_ena) begin
        if (top_dmem_bank_wre[0]) begin
            top_dmem_bank_0_ram[top_dmem_bank_addr] <= top_dmem_bank_in[0];
        end
        top_dmem_bank_out[0] <= top_dmem_bank_0_ram[(top_dmem_bank_addr % 2048)];
    end
end



    initial $readmemh("rom0.vmem", top_dmem_bank_0_ram);
    
always @(posedge clock) begin: TOPBENCH_TOP_DMEM_BANK_1_LOGIC
    if (top_dmem_ena) begin
        if (top_dmem_bank_wre[1]) begin
            top_dmem_bank_1_ram[top_dmem_bank_addr] <= top_dmem_bank_in[1];
        end
        top_dmem_bank_out[1] <= top_dmem_bank_1_ram[(top_dmem_bank_addr % 2048)];
    end
end



    initial $readmemh("rom1.vmem", top_dmem_bank_1_ram);
    
always @(posedge clock) begin: TOPBENCH_TOP_DMEM_BANK_2_LOGIC
    if (top_dmem_ena) begin
        if (top_dmem_bank_wre[2]) begin
            top_dmem_bank_2_ram[top_dmem_bank_addr] <= top_dmem_bank_in[2];
        end
        top_dmem_bank_out[2] <= top_dmem_bank_2_ram[(top_dmem_bank_addr % 2048)];
    end
end



    initial $readmemh("rom2.vmem", top_dmem_bank_2_ram);
    
always @(posedge clock) begin: TOPBENCH_TOP_DMEM_BANK_3_LOGIC
    if (top_dmem_ena) begin
        if (top_dmem_bank_wre[3]) begin
            top_dmem_bank_3_ram[top_dmem_bank_addr] <= top_dmem_bank_in[3];
        end
        top_dmem_bank_out[3] <= top_dmem_bank_3_ram[(top_dmem_bank_addr % 2048)];
    end
end



    initial $readmemh("rom3.vmem", top_dmem_bank_3_ram);
    
always @(top_dmem_sel, top_dmem_bank_out[0], top_dmem_bank_out[1], top_dmem_bank_out[2], top_dmem_bank_out[3], top_dmem_data_out, top_dmem_addr_out) begin: TOPBENCH_TOP_DMEM_DUMBASS_REASSEMBLE
    integer i;
    top_dmem_bank_addr <= top_dmem_addr_out[32-1:2];
    for (i=0; i<4; i=i+1) begin
        top_dmem_bank_wre[i] <= top_dmem_sel[i];
    end
    top_dmem_bank_in[0] <= top_dmem_data_out[8-1:0];
    top_dmem_bank_in[1] <= top_dmem_data_out[16-1:8];
    top_dmem_bank_in[2] <= top_dmem_data_out[24-1:16];
    top_dmem_bank_in[3] <= top_dmem_data_out[32-1:24];
    top_dmem_data_in <= {top_dmem_bank_out[3], top_dmem_bank_out[2], top_dmem_bank_out[1], top_dmem_bank_out[0]};
end

always @(posedge clock) begin: TOPBENCH_TOP_UART2_RXD_SYNC
    top_uart2_uart_rxd1 <= top_uart_rxd2;
    top_uart2_uart_rxd2 <= top_uart2_uart_rxd1;
end


assign top_uart2_enable16 = (!(top_uart2_enable16_counter != 0));


assign top_tx_busy2 = top_uart2_tx_is_busy;

always @(posedge clock) begin: TOPBENCH_TOP_UART2_ENABLE16_TICK
    if ((reset || top_uart2_enable16)) begin
        top_uart2_enable16_counter <= (27 - 1);
    end
    else begin
        top_uart2_enable16_counter <= (top_uart2_enable16_counter - 1);
    end
end

always @(posedge clock) begin: TOPBENCH_TOP_UART2_RECV
    if (reset) begin
        top_uart2_rx_count16 <= 0;
        top_rx_avail2 <= 1'b0;
        top_rx_error2 <= 1'b0;
        top_uart2_rx_is_busy <= 1'b0;
    end
    else begin
        if (top_read_en2) begin
            top_rx_avail2 <= 1'b0;
            top_rx_error2 <= 1'b0;
        end
        if (top_uart2_enable16) begin
            if ((!top_uart2_rx_is_busy)) begin
                if ((!top_uart2_uart_rxd2)) begin
                    top_uart2_rx_is_busy <= 1'b1;
                    top_uart2_rx_count16 <= 7;
                    top_uart2_rx_bitcount <= 0;
                end
            end
            else begin
                top_uart2_rx_count16 <= ((top_uart2_rx_count16 + 1) % 16);
                if ((top_uart2_rx_count16 == 0)) begin
                    top_uart2_rx_bitcount <= ((top_uart2_rx_bitcount + 1) % 16);
                    if ((top_uart2_rx_bitcount == 0)) begin
                        if (top_uart2_uart_rxd2) begin
                            top_uart2_rx_is_busy <= 1'b0;
                        end
                    end
                    else if ((top_uart2_rx_bitcount == 9)) begin
                        top_uart2_rx_is_busy <= 1'b0;
                        if (top_uart2_uart_rxd2) begin
                            top_rx_data2 <= top_uart2_rxd_reg;
                            top_rx_avail2 <= 1'b1;
                            top_rx_error2 <= 1'b0;
                        end
                        else begin
                            top_rx_error2 <= 1'b1;
                        end
                    end
                    else begin
                        top_uart2_rxd_reg <= {top_uart2_uart_rxd2, top_uart2_rxd_reg[8-1:1]};
                    end
                end
            end
        end
    end
end

always @(posedge clock) begin: TOPBENCH_TOP_UART2_TRANS
    if (reset) begin
        top_uart2_tx_is_busy <= 1'b0;
        top_uart_txd2 <= 1;
        top_uart2_tx_count16 <= 0;
    end
    else begin
        if ((top_write_en2 && (!top_uart2_tx_is_busy))) begin
            top_uart2_txd_reg <= {top_tx_data2[8-1:0], 1'b0};
            top_uart2_tx_bitcount <= 10;
            top_uart2_tx_count16 <= 0;
            top_uart2_tx_is_busy <= 1'b1;
        end
        if (top_uart2_enable16) begin
            top_uart2_tx_count16 <= ((top_uart2_tx_count16 + 1) % 16);
            if (((top_uart2_tx_count16 == 0) && top_uart2_tx_is_busy)) begin
                top_uart2_tx_bitcount <= (top_uart2_tx_bitcount - 1);
                if ((top_uart2_tx_bitcount == 0)) begin
                    top_uart2_tx_is_busy <= 1'b0;
                end
                else begin
                    top_uart_txd2 <= top_uart2_txd_reg[0];
                    top_uart2_txd_reg <= {1'b1, top_uart2_txd_reg[9-1:1]};
                end
            end
        end
    end
end

initial begin: TOPBENCH_STIMULUS
    integer i;
    reset <= 1'b0;
    # 37;
    reset <= 1'b1;
    # 53;
    reset <= 1'b0;
    for (i=0; i<2000; i=i+1) begin
        @(negedge clock);
    end
    reset <= 1'b0;
    # 37;
    reset <= 1'b1;
    # 53;
    reset <= 1'b0;
    for (i=0; i<2000; i=i+1) begin
        @(negedge clock);
    end
    $finish;
end

endmodule
